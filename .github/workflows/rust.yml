
name: Rust

on:
  push:
    branches: [ main ]
jobs:
  deploy:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    # Runs when the commit message contains "[Released]"
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      - name: Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get -y install gcc gcc-multilib binutils xorg-dev libxkbcommon-dev libxcb-present-dev libxcb-composite0-dev libxcb-shape0-dev libxcb-xfixes0-dev
      - name: Build
        run: cargo build --release --verbose

      # Condition to only run if it's Ubuntu
      - name: Build Release Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo install cargo-deb
          cargo deb
          strip target/release/lino
          mkdir -p release
          mv target/debian/*.deb ./release/lino.deb
          tar -C ./target/release/ -czvf ./release/lino-linux.tar.gz ./lino
      
      # Condition to only run if it's OSX 
      - name: Build Release Mac
        if: matrix.os == 'macos-latest'
        run: |
          strip target/release/lino
          mkdir -p release
          tar -C ./target/release/ -czvf ./release/lino-osx.tar.gz ./lino
          
      # Condition to only run if it's Windows
      - name: Build Release Windows
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p release
          tar -C ./target/release/ -czvf ./release/lino-win32_64.tar.gz ./lino.exe
       
      # This will draft a new release & will attach the binaries produced by the above outputs.
      # You still need to publish this release though after job ends.
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          files: |
            ./release/*.tar.gz
            ./release/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # You don't need to add this in secrets it's by default.
